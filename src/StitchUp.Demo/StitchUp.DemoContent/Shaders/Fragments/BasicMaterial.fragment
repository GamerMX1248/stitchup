fragment basic_material;

[params]
float alpha : ALPHA;
float3 diffuse_color : DIFFUSE_COLOR;
float3 specular_color : SPECULAR_COLOR;
float specular_power : SPECULAR_POWER;
float specular_intensity : SPECULAR_INTENSITY;
float roughness : ROUGHNESS;
bool diffuse_texture_enabled : DIFFUSE_TEXTURE_ENABLED;

[textures]
texture2D diffuse_texture;

[vertex]
float2 uv;

[interpolators]
float2 uv;

[ps 1_1]
__hlsl__
void main(INPUT input, inout OUTPUT output)
{
	if (diffuse_texture_enabled)
	{
		float4 texture_color = tex2D(diffuse_texture, input.uv);
		export(float4, material_diffuse_color, texture_color);
	}
	else
	{
		export(float4, material_diffuse_color, float4(diffuse_color, alpha));
	}
	
	export(float4, material_specular_color, float4(specular_color, alpha));
	export(float, material_specular_power, specular_power);
	export(float, material_specular_intensity, specular_intensity);
	export(float, material_roughness, roughness);
}
__hlsl__